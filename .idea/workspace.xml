<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="553812e2-848f-46bd-aa3b-6ad39a149c7e" name="Changes" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="HTML File" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectId" id="2rMM5t3xJPGRWPMmC5dgLyfYCcq" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "DefaultHtmlFileTemplate": "HTML File",
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "WebServerToolWindowFactoryState": "false",
    "last_opened_file_path": "C:/Users/Braydon Gibson/WebstormProjects/CoffeeCapstone",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "run.code.analysis.last.selected.profile": "pProject Default",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\Braydon Gibson\WebstormProjects\CoffeeCapstone" />
    </key>
  </component>
  <component name="RunAnythingCache">
    <option name="myCommands">
      <command value="&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt;     &lt;meta charset=&quot;UTF-8&quot;&gt;     &lt;title&gt;CapstonePrototype&lt;/title&gt;     &lt;link href=&quot;https://unpkg.com/tabulator-tables@5.5.0/dist/css/tabulator_bootstrap5.min.css&quot; rel=&quot;stylesheet&quot;&gt;     &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css&quot; integrity=&quot;sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==&quot; crossorigin=&quot;anonymous&quot; referrerpolicy=&quot;no-referrer&quot; /&gt;     &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;     &lt;script type=&quot;text/javascript&quot; src=&quot;https://unpkg.com/tabulator-tables@5.5.0/dist/js/tabulator.min.js&quot;&gt;&lt;/script&gt;     &lt;style&gt;         body {             font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;             background-color: #f8f9fa;             color: #343a40;             padding-top: 20px;         }         .wrapper {             display: flex;             flex-direction: column;             align-items: center;             padding: 20px;             height: 97vh;         }         .tablemain {             width: 95vw;             height: 95vh;             max-width: 1400px;             box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);             border-radius: 10px;             overflow: hidden;             background-color: white;         }         .tablemain thead {             background-color: #00796b;             color: white;         }         .tablemain th {             padding: 15px 10px;             text-align: center;             font-size: 1.2em;         }         #data-table {             width: 100%;             height: 100%;         }         /* Modal Styling */         .modal {             display: none;             position: fixed;             z-index: 1;             left: 0;             top: 0;             width: 100%;             height: 100%;             overflow: auto;             background-color: rgba(0, 0, 0, 0.4);         }         .modal-content {             background-color: #fefefe;             position: absolute;             top: 50%;             left: 50%;             transform: translate(-50%, -50%);             padding: 30px;             border: 1px solid #888;             width: 60%;             max-width: 700px;             border-radius: 8px;             box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);         }         .close {             color: #aaa;             float: right;             font-size: 28px;             font-weight: bold;             cursor: pointer;         }         .close:hover,         .close:focus {             color: black;             text-decoration: none;         }         .modal-table {             width: 100%;             border-collapse: collapse;         }         .modal-table td {             padding: 10px;         }         .modal-table input:not([type=&quot;range&quot;]) {             width: 95%;             padding: 8px;             margin: 5px 0;             border: 1px solid #ccc;             border-radius: 4px;         }         .modal-table input[type=&quot;range&quot;] {             width: 95%;             padding: 8px;             margin: 5px 0;         }         .modal-table label {             display: block;             margin-bottom: 5px;         }         .modal-table button {             margin: 10px auto;             background-color: #00796b;             color: white;             padding: 10px 20px;             border: none;             border-radius: 4px;             cursor: pointer;             transition: background-color 0.3s ease;         }         .modal-table button:hover {             background-color: #218838;         }         .btn-add-new {             background-color: #00796b;             color: white;             padding: 8px 15px;             border: none;             border-radius: 4px;             text-decoration: none;             font-size: 1.1em;             transition: background-color 0.3s ease;         }         .btn-add-new:hover {             background-color: #004d40;         }         .submit-button-container {             display: flex;             justify-content: center;             width: 100%;         }     &lt;/style&gt; &lt;/head&gt; &lt;body&gt;  &lt;div class=&quot;wrapper&quot;&gt;     &lt;table class=&quot;tablemain&quot;&gt;         &lt;thead&gt;         &lt;tr&gt;             &lt;th&gt;                 &lt;h1 style=&quot;text-align: center&quot;&gt;Coffee Brewing Data&lt;/h1&gt;             &lt;/th&gt;             &lt;th&gt;                 &lt;h1 style=&quot;text-align: center&quot;&gt;                     &lt;button class=&quot;btn-add-new&quot; onclick=&quot;showModal('inputForm')&quot;&gt;+ Add New&lt;/button&gt;                 &lt;/h1&gt;             &lt;/th&gt;         &lt;/tr&gt;         &lt;/thead&gt;         &lt;tbody&gt;         &lt;tr&gt;             &lt;td colspan=&quot;2&quot;&gt;                 &lt;div id=&quot;data-table&quot;&gt;&lt;/div&gt;             &lt;/td&gt;         &lt;/tr&gt;         &lt;/tbody&gt;     &lt;/table&gt; &lt;/div&gt;  &lt;div id=&quot;editForm&quot; class=&quot;modal&quot;&gt;     &lt;div class=&quot;modal-content&quot;&gt;         &lt;span onclick=&quot;closeModal('editForm')&quot; class=&quot;close&quot; title=&quot;Close Modal&quot;&gt;&amp;times;&lt;/span&gt;         &lt;table class=&quot;modal-table&quot;&gt;             &lt;tbody id=&quot;editFormTable&quot;&gt;             &lt;/tbody&gt;         &lt;/table&gt;     &lt;/div&gt; &lt;/div&gt;  &lt;div id=&quot;inputForm&quot; class=&quot;modal&quot;&gt;     &lt;div class=&quot;modal-content&quot;&gt;         &lt;span onclick=&quot;closeModal('inputForm')&quot; class=&quot;close&quot; title=&quot;Close Modal&quot;&gt;&amp;times;&lt;/span&gt;         &lt;table class=&quot;modal-table&quot;&gt;             &lt;tbody id=&quot;inputFormTable&quot;&gt;             &lt;/tbody&gt;         &lt;/table&gt;     &lt;/div&gt; &lt;/div&gt;  &lt;script&gt;     let tabledata = JSON.parse(localStorage.getItem('tableData')) || [];     tabledata.forEach(row =&gt; {         Object.keys(row).forEach(key =&gt; {             if (!isNaN(row[key]) &amp;&amp; typeof row[key] !== 'boolean') {                 row[key] = parseFloat(row[key]);             }         });     });      const table = new Tabulator(&quot;#data-table&quot;, {         data: tabledata,         layout: &quot;fitDataStretch&quot;,         responsiveLayout: &quot;collapse&quot;,         columns: [             {formatter: () =&gt; &quot;&lt;i class='fa-solid fa-trash-can'&gt;&lt;/i&gt;&quot;, width: 40, hozAlign: &quot;center&quot;, cellClick: (e, cell) =&gt; deleteRow(cell)},             {formatter: () =&gt; &quot;&lt;i class='fa-solid fa-pencil'&gt;&lt;/i&gt;&quot;, width: 40, hozAlign: &quot;center&quot;, cellClick: (e, cell) =&gt; editRow(cell)},             {title: &quot;Roast&quot;, field: &quot;roast&quot;, hozAlign: &quot;center&quot;, responsive: 0},             {title: &quot;Origin&quot;, field: &quot;origin&quot;, hozAlign: &quot;center&quot;, responsive: 1},             {title: &quot;Brew Method&quot;, field: &quot;brew_method&quot;, hozAlign: &quot;center&quot;, responsive: 2},             {title: &quot;Water Weight&quot;, field: &quot;water_weight&quot;, hozAlign: &quot;center&quot;, responsive: 3},             {title: &quot;Coffee Weight&quot;, field: &quot;coffee_weight&quot;, hozAlign: &quot;center&quot;, responsive: 4},             {title: &quot;Ratio&quot;, field: &quot;ratio&quot;, hozAlign: &quot;center&quot;, responsive: 2},             {title: &quot;Time&quot;, field: &quot;time&quot;, hozAlign: &quot;center&quot;, responsive: 5},             {title: &quot;Grind&quot;, field: &quot;grind&quot;, hozAlign: &quot;center&quot;, responsive: 2},             {title: &quot;Temperature&quot;, field: &quot;temperature&quot;, hozAlign: &quot;center&quot;, responsive: 3},             {title: &quot;Aroma&quot;, field: &quot;aroma&quot;, hozAlign: &quot;center&quot;, formatter: &quot;progress&quot;, formatterParams: {min: 0, max: 5, legend: (value) =&gt; value, legendColor: &quot;#000000&quot;, color: [&quot;#dc3545&quot;, &quot;#fd7e14&quot;, &quot;#ffc107&quot;, &quot;#28a745&quot;, &quot;#20c997&quot;], legendAlign: &quot;center&quot;}, responsive: 0},             {title: &quot;Acidity&quot;, field: &quot;acidity&quot;, hozAlign: &quot;center&quot;, formatter: &quot;progress&quot;, formatterParams: {min: 0, max: 5, legend: (value) =&gt; value, legendColor: &quot;#000000&quot;, color: [&quot;#dc3545&quot;, &quot;#fd7e14&quot;, &quot;#ffc107&quot;, &quot;#28a745&quot;, &quot;#20c997&quot;], legendAlign: &quot;center&quot;}, responsive: 0},             {title: &quot;Sweetness&quot;, field: &quot;sweetness&quot;, hozAlign: &quot;center&quot;, formatter: &quot;progress&quot;, formatterParams: {min: 0, max: 5, legend: (value) =&gt; value, legendColor: &quot;#000000&quot;, color: [&quot;#dc3545&quot;, &quot;#fd7e14&quot;, &quot;#ffc107&quot;, &quot;#28a745&quot;, &quot;#20c997&quot;], legendAlign: &quot;center&quot;}, responsive: 0},             {title: &quot;Body&quot;, field: &quot;body&quot;, hozAlign: &quot;center&quot;, formatter: &quot;progress&quot;, formatterParams: {min: 0, max: 5, legend: (value) =&gt; value, legendColor: &quot;#000000&quot;, color: [&quot;#dc3545&quot;, &quot;#fd7e14&quot;, &quot;#ffc107&quot;, &quot;#28a745&quot;, &quot;#20c997&quot;], legendAlign: &quot;center&quot;}, responsive: 0},             {title: &quot;Finish&quot;, field: &quot;finish&quot;, hozAlign: &quot;center&quot;, formatter: &quot;progress&quot;, formatterParams: {min: 0, max: 5, legend: (value) =&gt; value, legendColor: &quot;#000000&quot;, color: [&quot;#dc3545&quot;, &quot;#fd7e14&quot;, &quot;#ffc107&quot;, &quot;#28a745&quot;, &quot;#20c997&quot;], legendAlign: &quot;center&quot;}, responsive: 0},             {title: &quot;Average Score&quot;, field: &quot;average_score&quot;, hozAlign: &quot;center&quot;, responsive: 0},             {title: &quot;Notes&quot;, field: &quot;notes&quot;, hozAlign: &quot;center&quot;, responsive: 0}         ],     });      function deleteRow(cell) {         const row = cell.getRow();         tabledata.splice(row.getIndex(), 1);         localStorage.setItem('tableData', JSON.stringify(tabledata));         row.delete();     }      function editRow(cell) {         const row = cell.getRow();         const rowData = row.getData();         populateForm('editForm', rowData);         showModal('editForm');         document.getElementById(&quot;updateBtn&quot;).onclick = () =&gt; updateData(row);     }      function updateData(row) {         const updatedData = getFormData('editForm');         if (validateData(updatedData)) {             updatedData.average_score = calculateAverageScore(updatedData);             updatedData.ratio = calculateRatio(updatedData.water_weight, updatedData.coffee_weight);             tabledata[row.getIndex()] = updatedData;             row.update(updatedData);             localStorage.setItem('tableData', JSON.stringify(tabledata));             closeModal('editForm');         }     }      function submitData() {         const newData = getFormData('inputForm');         if (validateData(newData)) {             newData.average_score = calculateAverageScore(newData);             newData.ratio = calculateRatio(newData.water_weight, newData.coffee_weight);             tabledata.push(newData);             table.addData([newData]);             localStorage.setItem('tableData', JSON.stringify(tabledata));             closeModal('inputForm');         }     }      function getFormData(formId) {         const formData = {};         const formElements = document.querySelectorAll(`#${formId} input`);         formElements.forEach(input =&gt; {             let key = input.id.replace(/^edit-|input-/, '').replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();             if (input.type === 'number' || input.type === 'range') {                 formData[key] = parseFloat(input.value);             } else {                 formData[key] = input.value;             }         });         return formData;     }      function validateData(data) {         if (isNaN(data.water_weight) || data.water_weight &lt;= 0 || isNaN(data.coffee_weight) || data.coffee_weight &lt;= 0 || isNaN(data.temperature) || data.temperature &lt;= 0) {             alert(&quot;Water weight, coffee weight, and water temperature must be greater than 0 and numerical.&quot;);             return false;         }         return true;     }      function calculateAverageScore(data) {         return ((data.aroma || 0) + (data.acidity || 0) + (data.sweetness || 0) + (data.body || 0) + (data.finish || 0)) / 5;     }      function calculateRatio(waterWeight, coffeeWeight) {         return coffeeWeight !== 0 ? &quot;1:&quot; + (waterWeight / coffeeWeight).toFixed(1) : &quot;N/A&quot;;     }      function populateForm(formId, data) {         const formTable = document.getElementById(`${formId}Table`);         formTable.innerHTML = '';         for (const [key, value] of Object.entries(data)) {             formTable.innerHTML += `                 &lt;tr&gt;                     &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;${formId === 'inputForm' ? '' : 'edit-'}${key}&quot; value=&quot;${value}&quot; placeholder=&quot;${key.replace('_', ' ').toUpperCase()}&quot; /&gt;&lt;/td&gt;                 &lt;/tr&gt;             `;         }         formTable.innerHTML += `             &lt;tr&gt;&lt;td colspan=&quot;2&quot; class=&quot;submit-button-container&quot;&gt;&lt;button type=&quot;button&quot; id=&quot;updateBtn&quot;&gt;Update&lt;/button&gt;&lt;/td&gt;&lt;/tr&gt;         `;     }      function showModal(modalId) {         document.getElementById(modalId).style.display = &quot;block&quot;;     }      function closeModal(modalId) {         document.getElementById(modalId).style.display = &quot;none&quot;;     } &lt;/script&gt;  &lt;/body&gt; &lt;/html&gt; " />
    </option>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="553812e2-848f-46bd-aa3b-6ad39a149c7e" name="Changes" comment="" />
      <created>1736364310582</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1736364310582</updated>
      <workItem from="1736364311779" duration="7381000" />
      <workItem from="1736395484339" duration="97000" />
      <workItem from="1736971284208" duration="18777000" />
      <workItem from="1737072810807" duration="2373000" />
      <workItem from="1737575709392" duration="1652000" />
      <workItem from="1737657455125" duration="10543000" />
      <workItem from="1737669827839" duration="583000" />
      <workItem from="1737733230838" duration="3226000" />
      <workItem from="1738180670969" duration="2628000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
</project>